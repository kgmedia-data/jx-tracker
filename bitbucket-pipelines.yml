
image: node:12.18.0
          
pipelines:
  custom:
    production_rec_widget_sdk:
      - step:
          name: "build"
          script: 
            # in order that the yml file is the same for all the branches, it is then theoretically to
            # run a custom pipeline (THIS ONE) while selecting branch to be production_osm
            # So we have a check below to make sure it does not happen:
            - echo "Paranoid Checking that this pipeline is really using branch production_rec_widget_sdk"
            - if [ ! $BITBUCKET_BRANCH = "production_rec_widget_sdk" ]; then exit 1; fi
            - npm install
            - npm install -g gulp
            # the stuff (AWS key and secret) will still be unresolved but with this pipeline
            # we do not really do the aws push in the gulp build, so it is fine.
            # below we do the aws copy explicitly.
            # The seed file does NOT contain the real aws keys.
            - cp config-keys-seed.js config-keys.js
            # the config-key's content will not be used since we are not making the gulp step
            # to push anything to AWS. Just have something so that the gulpfile will not complain.
            - gulp PREP-PROD
          artifacts:  
            - dist/**
            - tests/**
      - step:     
          name: "push2s3"
          trigger: manual
          script:
            - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" 
            - unzip awscliv2.zip
            - ./aws/install 
            - aws --version
            ###- this stuff stopped working one fine day. use the above instead then. apt-get update -y && apt-get install awscli -y
            - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - cd dist/bundles
            # Now to copy to AWS:
            - aws s3 cp jxrwidget.1.0.min.js s3://jx-scripts/jxrwidget.1.0.min.js --acl public-read
            - aws s3 cp jxvwidget.1.0.min.js s3://jx-scripts/jxvwidget.1.0.min.js --acl public-read
            - cd ../sdks
            # Now to copy to AWS:
            - aws s3 cp jxrecsdk.1.0.min.js s3://jx-scripts/jxrecsdk.1.0.min.js --acl public-read
            # ok we need to move the css to a proper place. but for now...
            - cd ../../tests
            # Now to copy to AWS:
            - aws s3 cp grid-vert-bars-widget.css s3://jx-scripts/grid-vert-bars-widget.css --acl public-read
            - aws s3 cp grid-widget.css s3://jx-scripts/grid-widget.css --acl public-read
            - aws s3 cp rows-widget.css s3://jx-scripts/rows-widget.css --acl public-read
            - aws s3 cp jxrecwidget.1.0.css s3://jx-scripts/jxrecwidget.1.0.css --acl public-read

    production_osm:
      - step:
          name: "build"
          script: 
            # in order that the yml file is the same for all the branches, it is then theoretically to
            # run a custom pipeline (THIS ONE) while selecting branch to be production_rec_widget_sdk
            # So we have a check below to make sure it does not happen:
            - echo "Paranoid Checking that this pipeline is really using branch production_osm"
            - if [ ! $BITBUCKET_BRANCH = "production_osm" ]; then exit 1; fi
                      
            - npm install
            - npm install -g gulp
            # the stuff (AWS key and secret) will still be unresolved but with this pipeline
            # we do not really do the aws push in the gulp build, so it is fine.
            # below we do the aws copy explicitly.
            # The seed file does NOT contain the real aws keys.
            - cp config-keys-seed.js config-keys.js
            # the config-key's content will not be used since we are not making the gulp step
            # to push anything to AWS. Just have something so that the gulpfile will not complain.
            - gulp PREP-PROD
          artifacts:  
            - dist/**
      - step:
          name: "push2s3"
          trigger: manual
          script:
            - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" 
            - unzip awscliv2.zip
            - ./aws/install 
            - aws --version
            ###- this stuff stopped working one fine day. use the above instead then. apt-get update -y && apt-get install awscli -y
            - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - cd dist/bundles
            # Now to copy to AWS:
            - aws s3 cp jxamp.min.js s3://jx-scripts/jxamp.min.js --acl public-read
            - aws s3 cp jxfriendly.2.0.flt.min.js s3://jx-scripts/jxfriendly.2.0.flt.min.js --acl public-read
            - aws s3 cp jxfriendly.2.0.min.js s3://jx-scripts/jxfriendly.2.0.min.js --acl public-read
            - aws s3 cp jxosm.1.0.min.js s3://jx-scripts/jxosm.1.0.min.js --acl public-read
            - aws s3 cp jxhbrenderer.1.1.min.js s3://jx-scripts/jxhbrenderer.1.1.min.js --acl public-read
            - aws s3 cp jxhbrenderer.2.0.min.js s3://jx-scripts/jxhbrenderer.2.0.min.js --acl public-read
            ##- aws s3 cp jxvideoad.2.0.min.js s3://jx-scripts/jxvideoad.2.0.min.xxx.js --acl public-read
            - aws s3 cp jxvideocr.1.0.min.js s3://jx-scripts/jxvideocr.1.0.min.js --acl public-read

   