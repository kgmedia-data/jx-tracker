
image: node:12.18.0
          
pipelines:
  custom:
    production_rec_widget_sdk:
      - step:
          name: "build_step_PLS_CHECK_BRANCH_IS_production_rec_widget_sdk"
          script: 
            - npm install
            - npm install -g gulp
            # the stuff (AWS key and secret) will still be unresolved but with this pipeline
            # we do not really do the aws push in the gulp build, so it is fine.
            # below we do the aws copy explicitly.
            # The seed file does NOT contain the real aws keys.
            - cp config-keys-seed.js config-keys.js
            # the config-key's content will not be used since we are not making the gulp step
            # to push anything to AWS. Just have something so that the gulpfile will not complain.
            - gulp PREP-PROD
          artifacts:  
            - dist/**
      - step:     
          name: "push2s3_step_PLS_CHECK_BRANCH_IS_production_rec_widget_sdk"
          trigger: manual
          script:
            - apt-get update -y && apt-get install awscli -y
            - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - cd dist/bundles
            # Now to copy to AWS:
            - aws s3 cp jxrwidget.1.0.min.js s3://jx-scripts/jxrwidget.1.0.xxx.min.js --acl public-read
            - cd ../sdks
            # Now to copy to AWS:
            - aws s3 cp jxrecsdk.1.0.min.js s3://jx-scripts/jxrecsdk.1.0.xxx.min.js --acl public-read

    production_osm:
      - step:
          name: "build_step_PLS_CHECK_BRANCH_IS_production_osm"
          script: 
            - npm install
            - npm install -g gulp
            # the stuff (AWS key and secret) will still be unresolved but with this pipeline
            # we do not really do the aws push in the gulp build, so it is fine.
            # below we do the aws copy explicitly.
            # The seed file does NOT contain the real aws keys.
            - cp config-keys-seed.js config-keys.js
            # the config-key's content will not be used since we are not making the gulp step
            # to push anything to AWS. Just have something so that the gulpfile will not complain.
            - gulp PREP-PROD
          artifacts:  
            - dist/**
      - step:
          name: "push2s3_step_PLS_CHECK_BRANCH_IS_production_osm"
          trigger: manual
          script:
            - apt-get update -y && apt-get install awscli -y
            - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - cd dist/bundles
            # Now to copy to AWS:
            - aws s3 cp jxamp.min.js s3://jx-scripts/jxamp.min.xxx.js --acl public-read
            - aws s3 cp jxfriendly.2.0.flt.min.js s3://jx-scripts/jxfriendly.2.0.flt.min.xxx.js --acl public-read
            - aws s3 cp jxfriendly.2.0.min.js s3://jx-scripts/jxfriendly.2.0.min.xxx.js --acl public-read
            - aws s3 cp jxosm.1.0.min.js s3://jx-scripts/jxfriendly.2.0.flt.min.xxx.js --acl public-read
            - aws s3 cp jxhbrenderer.1.1.min.js s3://jx-scripts/jxhbrenderer.1.1.xxx.min.js --acl public-read
            - aws s3 cp jxvideoad.2.0.min.js s3://jx-scripts/jxvideoad.2.0.min.xxx.js --acl public-read
            - aws s3 cp jxvideocr.1.0.min.js s3://jx-scripts/jxvideocr.1.0.min.xxx.js --acl public-read

   